*xtabline.txt*    xTabline     Version 0.8.0    Last change: August 10 2018

XTABLINE - TABLE OF CONTENTS																				   *xtabline*
===============================================================================

	Features list                         |xtabline-features|
	Requirements                          |xtabline-requirements|
	Installation                          |xtabline-installation|
	Settings and mappings                 |xtabline-settings|
	Tab buffers navigation                |xtabline-navigation|
	Closing buffers                       |xtabline-closing-buffers|
	Tabs and Buffers                      |xtabline-tabs-and-buffers|
		Opening tabs                        |xtabline-opening-tabs|
		Saving and loading tabs             |xtabline-saving-and-loading-tabs|
		Managing buffers                    |xtabline-managing-buffers|
		Tuning buffer filtering             |xtabline-tuning-buffer-filtering|
		Rearranging buffers                 |xtabline-rearranging-buffers|
		Customizing tabs and buffers        |xtabline-customizing-tabs-and-buffers|
	Sessions management                   |xtabline-sessions|
	Other commands, plugs and mappings    |xtabline-other|
		Buffers clean-up                    |xtabline-clean-up|
		Tab-Todo                            |xtabline-tab-todo|
		Cwd selection                       |xtabline-cwd|
	Customization                         |xtabline-customization|
		Formatting                          |xtabline-formatting|
		Buffers formatting                  |xtabline-buffers-formatting|
		Tab formatting                      |xtabline-tab-formatting|
		Remapping commands                  |xtabline-remapping|
	Credits                               |xtabline-credits|
	License                               |xtabline-license|


FEATURES LIST                                                *xtabline-features*
===============================================================================

This plugin tries to give you full control on the tabline. I wanted ways to:

* switch between tabs and buffer mode
* have buffers filtered on the base of the current CWD, or other criterias
* show only the most recently accessed buffers for the current tab (default 10)
* rename tabs/buffers, and give them icons/separators
* load/save customized tabs from/to disk
* reopen closed tabs
* have any customization persist across sessions
* have it look good, with easy formatting options

Additionally, it provides:

* buffers quick navigation (next, previous, with [count])
* commands to rearrange tabs and buffers positions
* commands to clean up buffers across all tabs
* session management: load/save/delete sessions, with timestamping/descriptions
* Tab-todo: customizable command to open a todo file for that tab

Integrated with:

* |fzf-vim| (load saved tabs, sessio management)
* |vim-obsession| for automatic CWDs persistance across sessions
* additional support for |vim-devicons|

Reuses code from:

* [Buftabline](https://github.com/ap/vim-buftabline) for the bufferline
* [Taboo](https://github.com/gcmt/taboo.vim) for the tabline





REQUIREMENTS                                             *xtabline-requirements*
===============================================================================

{vim-obsession}{1} is required for persistance and sessions commands.
{fzf-vim}{2} is required for bookmarks and sessions commands.

																		 {1} https://github.com/tpope/vim-obsession
                                     {2} https://github.com/junegunn/fzf.vim



INSTALLATION                                             *xtabline-installation*
===============================================================================

Use {vim-plug}{3} or any other Vim plugin manager.

With vim-plug:
>
    Plug 'mg979/vim-xtabline'
<
                                      {3} https://github.com/junegunn/vim-plug




SETTINGS AND MAPPINGS                                        *xtabline-settings*
===============================================================================

To change any setting, you have to initialize the settings dictionary:
>
    let g:xtabline_settings = {}

Most of xtabline mappings can be associated to a prefix. Default is:
>
    let g:xtabline_settings.map_prefix = '<leader>x'

This means that most commands will be mapped to `<leader>x` + a modifier.
You can change the prefix and all mappings will be changed accordingly.
Most mappings presented are meant prefixed by <prefix>, when preceded by *.

Mappings are disabled by default. To enable them:
>
    let g:xtabline_settings.enable_mappings = 1

You can lazy load the plugin:
>
    let g:xtabline_lazy = 1		( will load on TabNew, SessionLoadPost, BufAdd )
    let g:xtabline_lazy = 2		( will load manually with XTablineInit )




TAB BUFFERS NAVIGATION                                    *xtabline-navigation*
===============================================================================

By default, in the bufferline will be shown buffers that belong to the tab's
CWD, or any open buffer inside the window.  Using xtabline buffer navigation
commands you can switch among them, while using the normal *:bnext* command,
you still cycle among the default (global) buffer list.

																								 *xtabline-most-recent-buffers*
The number of buffers that can be shown in the tabline is limited (by default)
to the 10 most recently accessed buffers. This is done to avoid tabline
overcrowding. To change the limit of buffers that can be shown, you can set the
|most_recent_buffers| option to a different value.
See |xtabline-customization| for options descriptions.

---------------------------------+------------------------------------------
Mapping                          | Default                              ~
---------------------------------+------------------------------------------
<Plug>(XT-Select-Buffer)         | [count] <BS>
<Plug>(XT-Next-Buffer)           | [count] ]b
<Plug>(XT-Prev-Buffer)           | [count] [b
<Plug>(XT-Close-Buffer)          | *q

{Next-Buffer} and {Prev-Buffer} accept a [count], to move to Â±[N] buffer, as
they are shown in the tabline.  If moving beyond the limit, it will start from
the start (or the end).

{Select-Buffer} works this way:

* it needs a [count] to work, eg. 2<BS> would bring you to buffer #2
* when not using a [count], it will execute a command of your choice

Define this command by setting the `g:xtabline_settings.alt_action` variable.
Default is `buffer #`

Examples:
>
		" switch to alternative buffer
    let g:xtabline_settings.select_buffer_alt_action = "buffer #"
		" call fzf-vim :Buffers command
    let g:xtabline_settings.select_buffer_alt_action = "Buffers"


`XTabCloseBuffer` will close and delete the current buffer, while keeping the
window open, and loading either:

* the alternate buffer
* a valid buffer for the tab

It will not try to close the tab page/quit vim, unless:
>
    let g:xtabline_settings.close_buffer_can_close_tab = 1
    let g:xtabline_settings.close_buffer_can_quit_vim  = 1



TABS AND BUFFERS                                     *xtabline-tabs-and-buffers*
===============================================================================


OPENING TABS                                *xtabline-opening-tabs*

You can toggle between buffers and tabs with <F5>

--------------+----------+---------------------
Command       | Mapping  | Plug               ~
--------------+----------+---------------------
XTabNew       | *tn      | <Plug>(XT-Tab-New)
XTabEdit      | *te      | <Plug>(XT-Tab-Edit)
XTabReopen    | *rt      | <Plug>(XT-Reopen)
XEdit         | *rt      | <Plug>(XT-Edit)

`XTabNew`     accepts a parameter, that is the name of the new tab
`XTabEdit`    accepts a path, triggers rename if called with bang
`XTabReopen`  lets you reopen a previosly closed tab, and is repeatable
`XEdit`       like :edit, but prompts for directory creation, if not existant.


SAVING AND LOADING TABS                     *xtabline-saving-and-loading-tabs*


`fzf-vim` is required. With most of the *fzf-vim* commands you can select
multiple items by pressing <Tab>.

--------------+----------+-----------------------
Command       | Mapping  | Plug                 ~
--------------+----------+-----------------------
XTabListTabs  | *tl      | <Plug>(XT-List-Tabs)
XTabLoadTab   | *lt      | <Plug>(XT-Load-Tab)
XTabSaveTab   | *st      | <Plug>(XT-Save-Tab)
XTabDeleteTab | *dt      | <Plug>(XT-Delete-Tab)

Saved tabs are stored in `$HOME/.vim/.XTablineTabs`.



MANAGING BUFFERS                                  *xtabline-managing-buffers*


_fzf-vim_ is required.

--------------------------+----------+----------------------------------
Command                   | Mapping  | Plug                            ~
--------------------------+----------+----------------------------------
XTabListBuffers           | *bl      | <Plug>(XT-List-Buffers)
XTabDeleteBuffers         | *db      | <Plug>(XT-Delete-Buffers)
XTabDeleteGlobalBuffers   | *dgb     | <Plug>(XT-Delete-Global-Buffers)

`XTabListBuffers`           list a list of `Tab Buffers` to choose from
`XTabDeleteBuffers`         same list, but use `bdelete` command on them
`XTabDeleteGlobalBuffers`   `bdelete`, but choose from the global buffers list



TUNING BUFFER FILTERING                     *xtabline-tuning-buffer-filtering*


----------------+----------+------------------------------
Command         | Mapping  | Plug                        ~
----------------+----------+------------------------------
XTabWD!         |  *wd     | <Plug>(XT-Working-Directory)
XTabPinBuffer   |  *pb     | <Plug>(XT-Pin-Buffer)
XTabDepth       |  *sd     | <Plug>(XT-Set-Depth)
                |  *tf     | <Plug>(XT-Toggle-Filtering)

`XTabWD`         will let you set the `cwd` and updates the tabline. With a
               bang, you'll be prompted for a cwd
`XTabPinBuffer`  a pinned buffer will be visible in all tabs
`XTabDepth`      will let you set the filtering depth

<Plug>(XT-Toggle-Filtering) toggles buffer filtering for all tabs.

By default, in the bufferline will be shown buffers that belong to the tab's
CWD, or any open buffer inside the window.

With `XTabDepth` you can define how many directories below the current one
will be valid for buffer filtering:

* If no [count] is given, command toggles between depth -1 (all dirs below
  cwd) and 0 (cwd root only)
* If a [count] is given, filtering depth will be set to that number.



REARRANGING BUFFERS                         *xtabline-rearranging-buffers*


----------+------------------------------
 Mapping  | Plug                        ~
----------+------------------------------
          | <Plug>(XT-Move-Buffer-Next)
          | <Plug>(XT-Move-Buffer-Prev)
*mb       | <Plug>(XT-Move-Buffer-To)
*hb       | <Plug>(XT-Hide-Buffer)

{Move-Buffer-Next} and {Move-Buffer-Prev} don't have a default mapping.
They move the current buffer to the next/previous position in the tabline, but
they only work for buffers that are considered valid for the current tab.

{Move-Buffer-To} accepts a [count], and will move the current buffer after
[count] position.

{Hide-Buffer} puts the current buffer last, and then selects [count] buffer,
as by *Select-Buffer*. Selects first if no [count] is given.




CUSTOMIZING TABS AND BUFFERS                *xtabline-customizing-tabs-and-buffers*


------------------+-----------+-------------------------------
Command           | Mapping   | Plug                         ~
------------------+-----------+-------------------------------
XTabRenameTab     |  *nt      | <Plug>(XT-Rename-Tab)
XTabRenameBuffer  |  *nb      | <Plug>(XT-Rename-Buffer)
XTabIcon          |  *it      | <Plug>(XT-Tab-Icon)
XTabBufferIcon    |  *ib      | <Plug>(XT-Buffer-Icon)
XTabFormatBuffer  |  *fb      | <Plug>(XT-Buffer-Format)
XTabRelativePaths |  *rp      | <Plug>(XT-Relative-Paths)
XTabResetTab      |  *Rt      | <Plug>(XT-Reset-Tab)
XTabResetBuffer   |  *Rb      | <Plug>(XT-Reset-Buffer)
XTabCustomTabs    |  *ct      | <Plug>(XT-Custom-Tabs)

`XTabFormatBuffer`   change the label formatting
`XTabRelativePaths`  toggles between basename and relative path in the bufferline
`XTabResetTab`       reset tab customizations
`XTabResetBuffer`    reset buffer customization
`XTabCustomTabs`     toggle visibility of tab customizations (name, icon)

When assigning an icon, you can autocomplete the icon name, or insert a single
character. To expand the list of available icons for autocompletion, see
|xtabline-customization|

`XTabResetTab` will also try to find a suitable cwd for that tab.




SESSION MANAGEMENT                                           *xtabline-sessions*
===============================================================================

Both |vim-obsession| and |fzf-vim| are required.

-----------------------+---------+------------------------------------------
Command                | Mapping | Plug  ~
-----------------------+---------+------------------------------------------
XTabLoadSession        | *ls     | <Plug>(XT-Load-Session)
XTabSaveSession        | *ss     | <Plug>(XT-Save-Session)
XTabDeleteSession      | *ds     | <Plug>(XT-Delete-Session)
XTabNewSession         | *ns     | <Plug>(XT-New-Session)

Descriptions are saved in `$HOME/.vim/.XTablineSessions`.

Session commands operate on sessions found in the specified directory. Default:
>
  let g:xtabline_settings.sessions_path = '$HOME/.vim/session'

When loading sessions, the last modification date will be shown, along with
the description and the symbol `[%]` that marks the active session (if any).




OTHER COMMANDS                                                  *xtabline-other*
===============================================================================

-----------------------+---------+------------------------------------------
Command                | Mapping | Plug  ~
-----------------------+---------+------------------------------------------
XTabPurge              |  *pt     | <Plug>(XT-Purge)
XTabCleanUp!           |  *wa     | <Plug>(XT-Wipe-All)
XTabCleanUp            |  *cu     | <Plug>(XT-Clean-Up)
XTabTodo               |  *tt     | <Plug>(XT-Tab-Todo)

XTabNERDBookmarks opens the list of `NERDTreeBookmarks`


BUFFERS CLEAN-UP                                         *xtabline-clean-up*

`XTabPurge`

This command is handy to close all buffers that aren't bound to a physical
file (eg. git logs, previews, quickfix windows etc). The tab won't be closed.

`XTabCleanUp`, `XTabCleanUp!`

This command deletes all buffers from the global buffers list, that are not
valid for any of the current tabs. Useful to get rid of terminal buffers in
neovim, for example, or to keep slim your buffer list.

With a bang, it also deletes tab buffers, leaving only the currently open
windows/buffers for each tab.


TAB-TODO                                                  *xtabline-tab-todo*

This command opens a todo file at the tab's CWD. Default mapping is *tt

Inside the todo buffer, `q` saves and closes the buffer.

You can define the filename and other options:
>
  let g:xtabline_settings.todo = { 'file': '.TODO', 'prefix': 'below',
    \'command': 'sp', 'size': 20, 'syntax': 'markdown'}

`file`    : the filename that will be used
`command` : eg. `below 20sp`, `vs`, `edit`, etc, check |opening-window|
`syntax`  : the filetype that will be assigned


CWD SELECTION                                                *xtabline-cwd*

Plug                   Mapping    ~
<Plug>(XT-Cd-Current)   *cdc    relative to the currently open buffer
<Plug>(XT-Cd-Down)      *cdd    [count1] directories below current buffer

These commands allow you to quickly change your tab CWD, and update the
tabline at the same time.




CUSTOMIZATION                                           *xtabline-customization*
===============================================================================

Command       Plug              Mapping    ~
XTabConfig    <Plug>(XT-Config)   *C     run the configurator
XTabTheme     <Plug>(XT-Theme)    *T     select a theme (<tab> autocompletion)

You can add any of these to your *.vimrc*, after having initialized the
`g:xtabline_settings` dictionary. Some of these options can be set in the
configurator.

    let g:xtabline_settings = {}
    let g:xtabline_settings.option_name = option_value

---------------------------+----------------------------------+----------
Option                     | Description                      | Default ~
---------------------------+----------------------------------+----------
enable_mappings            | `<Plug>`s are always defined       | 0
recent_buffers             | max number that will be shown    | 10
select_buffer_alt_action   | SelectBuffer alternative command | `buffer #`
sessions_path              | sessions directory               | `~/.vim/session`
map_prefix                 |                                  | <leader>x
close_buffer_can_close_tab |                                  | 0
close_buffer_can_quit_vim  |                                  | 0
unload_session_ask_confirm |                                  | 1
depth_tree_size            |                                  | 20
bookmarks_file             |                                  | `~/.vim/.XTablineBookmarks`
sessions_data              |                                  | `~/.vim/.XTablineSessions`
superscript_unicode_nrs    | use superscript or subscript nrs | 0
show_current_tab           |                                  | 1
last_open_first            |                                  | 0


FORMATTING                                             *xtabline-formatting*

---------------------------+-------------------------------+----------
Option                     | Description                   | Default ~
---------------------------+-------------------------------+----------
bufline_numbers            |                              | 1
bufline_sep_or_icon        | icon suppresses separator    | 0
bufline_separators         | alternative: ['î±', 'î±']      | ['|', '|']
devicon_for_all_filetypes  |                              | 0
devicon_for_extensions     |                              | ['md', 'txt']
bufline_format             |                              | " n I< l +"
tab_format                 |                              | "N - 2+ "
named_tab_format           |                              | "N - l+ "
bufline_tab_format         | defaults to settings above   | "N - 2+ "
bufline_named_tab_format   | defaults to settings above   | "N - l+ "
modified_tab_flag          |                              | '*'
close_tabs_label           |                              | ''
tab_icon                   |                              | ["ð", "ð"]
named_tab_icon             |                              | ["ð", "ð"]

`icons` are the ones that can be used when assigning an icon to a
tab/buffer, and can be used in other contexts (special buffers icon).
>
  let g:xtabline_settings.bufline_indicators = {
      \ 'modified': '[+]',
      \ 'readonly': '[ð]',
      \ 'scratch': '[!]',
      \ 'pinned': '[ð]',
      \}

  let g:xtabline_settings.icons = {
      \'pin': 'ð',
      \'star': 'â',
      \'book': 'ð',
      \'lock': 'ð',
      \'hammer': 'ð¨',
      \'tick': 'â',
      \'cross': 'â',
      \'warning': 'â ',
      \'menu': 'â°',
      \'apple': 'ð',
      \'linux': 'ð§',
      \'windows': 'â',
      \'git': 'î ',
      \'palette': 'ð¨',
      \'lens': 'ð',
      \'flag': 'ð',
      \}


BUFFERS FORMATTING                         *xtabline-buffers-formatting*

Default formatting is ` n I< l +`. In this notation, each character is
replaced by something, while spaces are retained as they are. Possible
elements are:

-------+--------------------------------------------
Option | Description                  ~
-------+--------------------------------------------
  l    | custom name, filename as fallback
  f    | filename
  n    | buffer number as small unicode
  N    | buffer number
  +    | indicators (modified, read only...)
  i    | icon (devicon preferred)
  I    | icon (custom icon preferred)
  <    | separator, can be suppressed by icon
  >    | separator, can't be suppressed by icon


TAB FORMATTING                                 *xtabline-tab-formatting*

Default formatting is `N - 2+ ` for unnamed tabs, `N - l+ ` for named tabs.
Notation rules are the same, but character meaning can be different:

-------+--------------------------------------------
Option | Description                  ~
-------+--------------------------------------------
  l    | custom name, short cwd as fallback
  -    | icon (custom icon preferred)
  +    | modified indicator
  f    | buffer filename
  a    | buffer path
  n    | tab number (current tab)
  N    | tab number (all tabs)
  w    | windows count
  W    | windows count
  u    | windows count as small unicode
  U    | windows count as small unicode
  P    | full cwd
  0    | short cwd, truncated at 0 directory separators
  1    | short cwd, truncated at 1 directory separators
  2    | short cwd, truncated at 2 directory separators


REMAPPING COMMANDS                                          *xtabline-remapping*

You can remap commands individually. These are some easier mappings I use:

>
  nmap <space>x          <Plug>(XT-Purge)
  nmap <space>b          <Plug>(XT-List-Buffers)
  nmap <space>t          <Plug>(XT-List-Tabs)
  nmap <M-q>             <Plug>(XT-Close-Buffer)



CREDITS                                                       *xtabline-credits*
===============================================================================

Bram Moolenaar for Vim
Buftabline for the bufferline rendering  https://github.com/ap/vim-buftabline
Taboo for the tabline rendering          https://github.com/gcmt/taboo.vim
Junegunn Choi for [fzf-vim]              https://github.com/junegunn/fzf.vim
Tim Pope for [vim-obsession]             https://github.com/tpope/vim-obsession
Kana Natsuno for [tabpagecd]             https://github.com/kana/vim-tabpagecd



LICENSE                                                       *xtabline-license*
===============================================================================

MIT


vim:tw=79:noet:sw=2:ts=2:ft=help:norl:nowrap:
