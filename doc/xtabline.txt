*xtabline.txt*    Version 0.4.0    Last change: August 14 2019

XTABLINE - TABLE OF CONTENTS                                        *xtabline*
==============================================================================

  Introduction                                   |xtabline-introduction|
  Features                                       |xtabline-features|
  Tabline rendering                              |xtabline-rendering|
  Main mappings                                  |xtabline-basic|
  Initialization                                 |xtabline-init|
  Tabline modes                                  |xtabline-modes|
  Tabline paths                                  |xtabline-paths|
  Tab working directories                        |xtabline-directories|
  Tab commands                                   |xtabline-tabs|
  Tab buffers                                    |xtabline-buffers|
  Session management                             |xtabline-sessions|
  Other commands                                 |xtabline-other|
  Customizing tabs and buffers                   |xtabline-customization|
  Settings                                       |xtabline-settings|
  Other options                                  |xtabline-options|
  Additional notes                               |xtabline-notes|
  Credits                                        |xtabline-credits|
  License                                        |xtabline-license|



INTRODUCTION                                           *xtabline-introduction*
==============================================================================

This plugin tries to give you full control on the tabline:

* buffer filtering on the base of the CWD (also local)
* three tabline modes: tabs, (filtered) buffers, |arglist|
* limit rendered buffers to the N most recently accessed (default 10)
* optional persistance in sessions

More features:

* tab CWD/name is shown in the right corner of the tabline
* commands to quickly set/change (tab/window) working directory
* buffers quick navigation (next, previous, with [count])
* reopen closed tabs
* clean up buffers across all tabs
* session management: load/save/delete sessions, with dates/descriptions
* tabs bookmarks: load/save customized tabs from/to disk
* tab-todo: customizable command to open a todo file for that tab

With the help of:

* |vim-obsession| for optional persistance





FEATURES LIST                                             *xtabline-features*
==============================================================================

The main features of the plugin are:

- custom tabline rendering    |xtabline-rendering|
- buffer filtering            |xtabline-buffer_filtering|
- tabs management             |xtabline-manage|
- sessions management         |xtabline-sessions|

By default, only tabline rendering is enabled: more specific options must be
enabled manually. Without any option set, you will see a different tabline,
but the rest works normally.

Buffer filtering makes sense if per-tab CWD is being used, either via |:tcd|
or |:lcd|. It means that in the tabline, only buffers that are valid for the
tab's CWD will be listed.

The last two are a series of commands that allow you to save/restore tabs and
sessions.

|vim-obsession| {1} is recommended for persistance.




TABLINE RENDERING                                         *xtabline-rendering*
==============================================================================

The tabline can be rendered in three different modes:

- 'tabs':     tab name, CWD, or buffer name
- 'arglist':  buffers contained in the arglist
- 'buffers':  up to a max of N (default 10) recent buffers

Default order is ['tabs', 'buffers', 'arglist'].

In |tabs-mode|, the tabline will show the numbered tabs. The label can be
customized as well (to show buffer name, tab cwd, etc). This is the closest to
vim default tabline, and it's the default mode.

In |arglist-mode|, the tabline will show the files included in the arglist.
You can switch file with the usual commands (|:next|, etc). Note that if the
arglist is empty, this mode won't be available.

In |buffers-mode|, the tabline will show a list of the most recently accessed
buffers (10 by default). This list will be filtered on the base of the current
tab's CWD, if |buffer_filtering| is active.





MAIN MAPPINGS                                                 *xtabline-basic*
==============================================================================

These are the default mappings for the most common functionalities. Mappings
can be disabled (|xtabline-enable_mappings|) or redefined (by directly mapping
ex commands).

<F5>        cycle among the modes described above. You can also define which
            modes to cycle with a setting. See |xtabline-tabline_modes|.

[count]<BS> used to select tabs or buffers. See |xtabline-select-buffer|.

cd...       a series of mappings used to change/display working directories
            and related stuff. See |xtabline-directories|.

<leader>x?  show all default mappings




INITIALIZATION                                                 *xtabline-init*
==============================================================================

Here are described the most important settings, for the full list read
|xtabline-settings|.

First you have to initialize the settings dictionary:
>
    let g:xtabline_settings = {}


-------------------------------------------------------- *xtabline-map_prefix*
>
    let g:xtabline_settings.map_prefix = '<leader>x'

Most of xtabline mappings can be associated to a prefix.
This means that most commands will be mapped to `<leader>x` + a modifier.
You can change the prefix and all mappings will be changed accordingly.
Most mappings presented are meant prefixed by <prefix>, when preceded by *.


----------------------------------------------------- *xtabline-tabline_modes*
>
    let g:xtabline_settings.tabline_modes = ['tabs', 'buffers', 'arglist']

The modes that can be put in this list are:

- |tabs|:       similar to the default vim tabline, with CWD in the corner
- |buffers|:    buffer names, formatted with |xtabline-buffer_format|.
- |arglist|:    the files contained in the arglist, as shown by |:args|

The modes can be cycled with <F5> (default).


-------------------------------------------------- *xtabline-buffer_filtering*
>
    let g:xtabline_settings.buffer_filtering = 1
<
Set this value to 0 to disable directory-based buffer filtering.






TABLINE MODES                                                 *xtabline-modes*
==============================================================================

Command                Mapping~
XTabCycleMode           <F5>
XTabFiltering           *f

*XTabCycleMode*     will cycle the tabline among the modes defined by the
                  |xtabline-tabline_modes| setting.

*XTabFiltering*     will toggle buffer filtering, based on either the tab's
                  CWD or base directory.







TABLINE PATHS                                                 *xtabline-paths*
==============================================================================
                                                      *xtabline-buffers_paths*
                                                  *xtabline-current_tab_paths*
                                                   *xtabline-other_tabs_paths*

Both in 'tabs' and 'buffers' mode, the path can be displayed in several ways.
Vim's default is to show a shortened version of the file's path, with
directory names reduced to a single letter. It generally gives you an idea of
the file position, and it's still the default in xtabline.

You can change this behaviour by altering the following settings:
>
    let g:xtabline_settings.buffers_paths = 1
    let g:xtabline_settings.current_tab_paths = 1
    let g:xtabline_settings.other_tabs_paths = 1

As the names suggest, the first one is used in |buffers-mode|, the other ones
in |tabs-mode|. They follow the same logic, for example, given a path
`long/path/to/file.ext`, this is how different values would look:

     `-2`  ->   path/to/file.ext
     `-1`  ->   to/file.ext
     ` 0`  ->   file.ext
     ` 1`  ->   l/p/t/file.ext      (default)
     ` 2`  ->   l/p/to/file.ext

For |tabs-mode| there are two different settings, because I personally prefer
to show only the basename for tabs other than the current one, and not the
shortened full path, as is Vim default. This can be achieved by setting:
>
    let g:xtabline_settings.other_tabs_paths = 0


------------------------------------------------------------------ *XTabPaths*
Command                           Mapping~
XTabPaths  [count]                *+
XTabPaths! [count]                *-

These commands (and relative mappings) can be used to temporarily change the
settings described above.

Note that they will change a different setting, based on the current mode:

  |tabs-mode|     ->   `current_tab_paths`
  |buffers-mode|  ->   `buffers_paths`

There are two mappings, *+ and *-, with the second one that sets a negative
value.

Without a [count], the commands toggle between a value of 0 (basename only)
and +1/-1 (respectively).





TAB WORKING DIRECTORIES                                 *xtabline-directories*
==============================================================================

Mappings and commands are provided to set a tab's working directory.
If the command is used with <bang>, directory prompt is skipped.

Command          Mapping~
*XTabWD* [!] <dir>  cdw     Set the tab CWD
*XTabLD* [!] <dir>  cdl     Set a window-local WD
*XTabTD* [!] <dir>  cdt     Set a tab-local WD
*XTabCD* [!] <dir>  cdc     |:cd| to dir of open buffer, or <count> down
*XTabInfo*          cd?     show current cwd (global/local/tab), git dir, tags

Note that |:tcd| is only available in neovim and the most recent vim versions
(>= 8.1).





TAB COMMANDS                                                   *xtabline-tabs*
==============================================================================


Command                Mapping~
XTabLast               *\
XTabReopen             *u

*XTabLast*    brings you back to the last visited tab
*XTabReopen*  reopen a previosly closed tab


Command                Mapping~
XTabListTabs           *a           (mnemonic: 'all tabs')
XTabListBuffers        *z           (mnemonic: just below previous)
XTabLoadTab            *tl
XTabSaveTab            *ts
XTabDeleteTab          *td
XTabDeleteBuffers      *bd

Saved tabs are stored in `$HOME/.vim/.XTablineTabs`.





TAB BUFFERS                                                 *xtabline-buffers*
==============================================================================
                                                      *xtabline-select-buffer*
Plug                              Mapping~
<Plug>(XT-Select-Buffer)          [count] <BS>

Command                           Mapping~
XTabNextBuffer                    [count] ]b
XTabPrevBuffer                    [count] [b
XTabCloseBuffer                   *q
XTabHideBuffer                    *h
XTabMoveBuffer                    *m
XTabMoveBufferNext                *]
XTabMoveBufferPrev                *[
XTabPinBuffer                     *p

------------------------------------------------------------------------------

`Select-Buffer` works this way:

* it needs a [count] to work, eg. 2<BS> would bring you to buffer #2
* when not using a [count], it will execute a command of your choice

Define this command by changing the |select_buffer_alt_action| setting.
Default is `:buffer #` (go to alternate buffer).

When in |tabs-mode|, [count]<BS> can still be used, and will bring you to the
N tab (<BS> is an alias for |gt| in this case).

------------------------------------------------------------------------------

*XTabNextBuffer* and *XTabPrevBuffer* accept a [count], to move to ±N buffer,
as they are shown in the tabline.  If moving beyond the limit, it will start
from the start (or the end).

------------------------------------------------------------------------------

*XTabCloseBuffer* will close and delete the current buffer, while keeping the
window open, and loading either:

* the alternate buffer
* a valid buffer for the tab

------------------------------------------------------------------------------

*XTabHideBuffer* removes the buffer from the list of recent buffers for the
tab, effectively hiding it from the tabline if there are enough tab buffers,
so that the next most recent one will take its place. Then [count] buffer will
be selected, as by |Select-Buffer|. Selects first if no count is given.
Differently from |XTabCloseBuffer|, the buffer is not deleted.

------------------------------------------------------------------------------

*XTabMoveBuffer* will move the current buffer at [count] position, or first if
no count is given.

------------------------------------------------------------------------------

*XTabMoveBufferNext* and *XTabMoveBufferPrev* move the current buffer to the
next/previous position in the tabline, but they only work for buffers that are
considered valid for the current tab.

------------------------------------------------------------------------------

*XTabPinBuffer* pins a buffer, so that it will be visible in all tabs.






SESSION MANAGEMENT                                         *xtabline-sessions*
==============================================================================

Command                Mapping ~
XTabLoadSession        *sl
XTabSaveSession        *ss
XTabDeleteSession      *sd
XTabNewSession         *sn

Descriptions are saved in `$HOME/.vim/.XTablineSessions`.

Session commands operate on sessions found in the specified directory.
Default:
>
  let g:xtabline_settings.sessions_path = '$HOME/.vim/session'

When loading sessions, the last modification date will be shown, along with
the description and the symbol `[%]` that marks the active session (if any).






OTHER COMMANDS                                                *xtabline-other*
==============================================================================

Command                Mapping~
XTabToggleLabels       *.
XTabPurge              *x
XTabCleanUp            *k
XTabCleanUp!           *K
XTabTodo               *d
XTabTheme              *T

*XTabNERDBookmarks*   opens the list of |NERDTreeBookmarks|
*XTabToggleLabels*    toggles visibility of tab customizations (name, icon)


------------------------------------------------------------------------------

BUFFERS CLEAN-UP                                           *xtabline-clean-up*

*XTabPurge*

This command is handy to close all buffers that aren't bound to a physical
file (eg. git logs, previews, quickfix windows etc). The tab won't be closed.

*XTabCleanUp* [!]

This command deletes all buffers from the global buffers list, that are not
valid for any of the current tabs. Useful to get rid of terminal buffers in
neovim, for example, or to keep slim your buffer list.

With a bang, it also deletes tab buffers, leaving only the currently open
windows/buffers for each tab.


------------------------------------------------------------------------------

TAB-TODO                                                   *xtabline-tab-todo*

This command opens a todo file at the tab's CWD.

Inside the todo buffer, `\q` does |:update| and closes the buffer.

You can define the filename and other options:
>
  let g:xtabline_settings.todo = { 'file': '.TODO', 'prefix': 'below',
    \'command': 'sp', 'size': 20, 'syntax': 'markdown'}

`file`    : the filename that will be used
`command` : eg. `below 20sp`, `vs`, `edit`, etc, check |opening-window|
`syntax`  : the filetype that will be assigned

------------------------------------------------------------------------------





CUSTOMIZING TABS AND BUFFERS                          *xtabline-customization*
==============================================================================

You can customize tabs and buffers to give them a special name or icon.
You can do this with the following commands:

Command                Mapping    Note~
XTabNameTab            *tn        custom label for tab
XTabNameBuffer         *bn                     ... buffer
XTabIconTab            *ti        icon for tab
XTabIconBuffer         *bi             ... buffer
XTabResetTab           *tr        remove label/icon for tab
XTabResetBuffer        *br                          ... buffer

------------------------------------------------------------------------------

You can also do it in a more automated way.

For `tabs`, you should use the function `xtabline#tab#set`( tabnr, opts )
Example:
>
  call xtabline#tab#set( 1, {'name': 'MyTab', 'icon': '@'} )

------------------------------------------------------------------------------

For `buffers`, you should use the function `xtabline#buffer#set`( nr, opts )
For example in a |ftplugin|:
>
  if exists('g:loaded_xtabline')
    let opts         = {}
    let opts.name    = 'MyBuffer'
    let opts.icon    = '#'
    " for scratch buffers, this is needed!
    let opts.special = 1
    call xtabline#buffer#set(bufnr(''), opts)
  endif

------------------------------------------------------------------------------

You can also lock a tab, so that only certain buffers will be visible
>
  xtabline#tab#lock( tabnr, [buffers for tab], {tab options})

Example:
>
  call xtabline#tab#lock(tabpagenr(), [bufnr('')], {'name': 'MyTab', 'icon': '^'})

------------------------------------------------------------------------------






SETTINGS                                                   *xtabline-settings*
==============================================================================
                                                         *xtabline-enabled*  >
    let g:xtabline_settings.enabled = 1

If set to 0, xtabline is disabled. You can also disable it per-buffer, if you
set a buffer variable:
>
  let b:no_xtabline = 1
<

--------------------------------------------------- *xtabline-enable_mappings*
>
    let g:xtabline_settings.enable_mappings = 1

Mappings are enabled by default.


------------------------------------------------ *xtabline-enable_persistance*
>
    let g:xtabline_settings.enable_persistance = 0

Persistance is disabled by default. It is used to save in current session file
informations such as custom tabs labels or pinned buffers.


------------------------------------------------- *xtabline-show_right_corner*
>
    let g:xtabline_settings.show_right_corner = 1
<
Set this value to 0 to remove the label on the right corner of the tabline.


---------------------------------------------------- *xtabline-recent_buffers*
>
    let g:xtabline_settings.recent_buffers = 10

The number of buffers that can be shown in the tabline is limited (by default)
to the 10 most recently accessed buffers.


--------------------------------------------------- *xtabline-last_open_first*
>
    let g:xtabline_settings.last_open_first = 0

Valid buffers will be ordered by time of access. Note that special or extra
buffers can still be listed before them, but they are also highlighted
differently.


----------------------------------------------------- *xtabline-buffer_format*
>
    let g:xtabline_settings.buffer_format = 2

This setting controls how the buffers are formatted in the tabline. Valid
values are:

  `1`       the buffer number (as by bufnr('%')), and the buffer base name
  `2`       the buffer position in the tabline, and the buffer base name
  `func`    a funcref (the buffer number is passed as parameter)

Function example:
>
    fun! MyBuflineFormat(bufnr)
      let A = '%#TabLineSel#'
      let B = bufnr('%') == a:bufnr ? '%#PmenuSel#' : '%#TabLine#'
      let name = bufname(a:bufnr) != '' ? bufname(a:bufnr) : '...'
      return printf('%s %s %s %s ', A, a:bufnr, B, name)
    endfun

    let g:xtabline_settings.buffer_format = function('MyBuflineFormat')


------------------------------------------------- *xtabline-wd_type_indicator*
>
    let g:xtabline_settings.wd_type_indicator = 0
<
Disabled by default, if enabled it adds an indicator in the right corner:

- `W`: there is a window-local directory set for the current buffer
- `T`: there is a tab-local directory set for the current tab

Only one letter will be shown, and window-local directories override tab-local
ones.

---------------------------------------- *xtabline-close_buffer_can_close_tab*
                                          *xtabline-close_buffer_can_quit_vim*
Default: 0

They affect whether the |XTabCloseBuffer| command can close a tab or even quit
vim, respectively.






OTHER OPTIONS                                               *xtabline-options*
==============================================================================

You can add any of these to your *.vimrc*, after having initialized the
`g:xtabline_settings` dictionary.

    let g:xtabline_settings = {}
    let g:xtabline_settings.option_name = option_value

---------------------------+--------------------------------------------------
Option                     | Default ~
---------------------------+--------------------------------------------------
select_buffer_alt_action   | `buffer #`
sessions_path              | `~/.vim/session`
close_buffer_can_close_tab | 0
close_buffer_can_quit_vim  | 0
bookmarks_file             | `~/.vim/.XTablineBookmarks`
sessions_data              | `~/.vim/.XTablineSessions`


LAZY LOADING                                                   *xtabline-lazy*

If you want to lazy load the plugin (since it can affect your startup time),
set: >
      let g:xtabline_lazy = 1

The plugin will then load after you add/create a buffer after the first one,
or you can initialize it with the command `XTablineInit`. Until then, mappings
and commands will not work.


FORMATTING                                               *xtabline-formatting*

---------------------------+--------------------------------------------------
Option                     | Default ~
---------------------------+--------------------------------------------------
buffers_paths              | 1
current_tab_paths          | 1
other_tabs_paths           | 1
buffer_format              | 2
tab_icon                   | ["📂", "📁"]

`icons` are the ones that can be used when assigning an icon to a tab/buffer,
and can be used in other contexts (special buffers icon).
>
  let g:xtabline_settings.indicators = {
      \ 'modified': '[+]',
      \ 'pinned': '[📌]',
      \}

  let g:xtabline_settings.icons = {
      \'pin': '📌',
      \'star': '★',
      \'book': '📖',
      \'lock': '🔒',
      \'hammer': '🔨',
      \'tick': '✔',
      \'cross': '✖',
      \'warning': '⚠',
      \'menu': '☰',
      \'apple': '🍎',
      \'linux': '🐧',
      \'windows': '⌘',
      \'git': '',
      \'palette': '🎨',
      \'lens': '🔍',
      \'flag': '🏁',
      \}




ADDITIONAL NOTES                                              *xtabline-notes*
==============================================================================

Note that |vim-obsession| isn't mandatory: the only caveat is that, if you
have it installed, xtabline will not touch session files by itself, and
persistance will not be enabled on sessions that aren't handled by
|vim-obsession|.

You may need some patched font for icons. In a Debian-based distribution you
can install the following packages:

- ttf-ancient-fonts-symbola
- fonts-powerline

In Windows, one of the pre-patched `nerd-fonts` is recommended.

     https://github.com/ryanoasis/nerd-fonts/releases





CREDITS                                                     *xtabline-credits*
==============================================================================

Bram Moolenaar for Vim
Aristotle Pagaltzis for [Buftabline]    https://github.com/ap/vim-buftabline
Giacomo Comitti for [Taboo]             https://github.com/gcmt/taboo.vim



LICENSE                                                     *xtabline-license*
==============================================================================

MIT


vim:tw=78:et:sw=2:ts=2:ft=help:nowrap:
