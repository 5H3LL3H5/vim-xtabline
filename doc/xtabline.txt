*xtabline.txt*    Version 0.4.0    Last change: August 14 2019

XTABLINE - TABLE OF CONTENTS                                         *xtabline*
===============================================================================

  Introduction                                   |xtabline-introduction|
  Features                                       |xtabline-features|
  Tabline rendering                              |xtabline-rendering|
  Settings and mappings                          |xtabline-settings|
  Tabline modes                                  |xtabline-modes|
  Tab buffers                                    |xtabline-buffers|
  Tab working and base directories               |xtabline-directories|
  Managing tabs and buffers                      |xtabline-manage|
  Session management                             |xtabline-sessions|
  Other commands                                 |xtabline-other|
    Buffers clean-up                             |xtabline-clean-up|
    Tab-Todo                                     |xtabline-tab-todo|
  Options summary                                |xtabline-options|
    Formatting                                   |xtabline-formatting|
    Buffers formatting                           |xtabline-buffers-formatting|
    Tab formatting                               |xtabline-tab-formatting|
    Remapping commands                           |xtabline-remapping|
  Additional notes                               |xtabline-notes|
  Credits                                        |xtabline-credits|
  License                                        |xtabline-license|


INTRODUCTION                                            *xtabline-introduction*
===============================================================================

This plugin tries to give you full control on the tabline:

* buffer filtering on the base of the current CWD, or other directories
* three tabline modes: (filtered) buffers, tabs, |arglist|
* limit rendered buffers to the N most recently accessed (default 10)
* persistance in sessions

More advanced features:

* buffers quick navigation (next, previous, with [count])
* reopen closed tabs
* clean up buffers across all tabs
* tabs/buffers formatting options (names, icons, separators, reordering)
* session management: load/save/delete sessions, with timestamping/descriptions
* tabs bookmarks: load/save customized tabs from/to disk
* tab-todo: customizable command to open a todo file for that tab

With the help of:

* |vim-obsession| for automatic CWDs persistance across sessions





FEATURES LIST                                               *xtabline-features*
===============================================================================

The main features of the plugin are:

- custom tabline rendering    |xtabline-rendering|
- per-tab CWD                 |xtabline-use_tab_cwd|
- buffer filtering            |xtabline-buffer_filtering|
- tabs management             |xtabline-manage|
- sessions management         |xtabline-sessions|

By default, only tabline rendering is enabled: more specific options must be
enabled manually. Without any option set, you will see a different tabline, but
the rest works normally.

Per-tab CWD means that each tab can have its own CWD (set with |:cd|): when
switching tabs, the tab's CWD is automatically restored. This will work even in
versions of vim that do not support the |:tcd| command.

Buffer filtering makes sense if per-tab CWD is being used, either via |:tcd| or
by setting the option above. It means that in the tabline, only buffers that
are valid for the tab's CWD will be listed.

The last two are a series of commands that allow you to save/restore tabs and
sessions.

|vim-obsession| {1} is recommended for persistance.




TABLINE RENDERING                                          *xtabline-rendering*
===============================================================================

The tabline can be rendered in three different modes:

- 'tabs':     tab name, CWD, or buffer name
- 'arglist':  buffers contained in the arglist
- 'buffers':  up to a max of N (default 10) recent buffers

Default order is ['tabs', 'arglist'], with 'buffers' disabled.

In |tabs-mode|, the tabline will show the numbered tabs. The label can be
customized as well (to show buffer name, tab cwd, etc).

In |arglist-mode|, the tabline will show the files included in the arglist. You
can switch file with the usual commands (|:next|, etc). Note that if the
arglist is empty, this mode won't be available.

In |buffer-mode|, the tabline will show a list of the most recently accessed
buffers (10 by default). This list will be filtered on the base of the current
tab's CWD, if |buffer_filtering| is active.

These modes can be cycled with a mapping (<F5> by default). You can also define
which modes to cycle with a setting (|tabline_modes|).




SETTINGS AND MAPPINGS                                       *xtabline-settings*
===============================================================================

Here are described the most important settings, for the full list read
|xtabline-options|.

To change most settings, you have to initialize the settings dictionary:
>
    let g:xtabline_settings = {}

------------------------------------------------------------------------------
                                                             *xtabline-lazy*  >
You can lazy load the plugin (on |TabNew|, |SessionLoadPost|, |BufAdd|):
>
    let g:xtabline_lazy = 1

------------------------------------------------------------------------------
                                                          *xtabline-enabled*  >
    let g:xtabline_settings.enabled = 1

If set to 0, xtabline is disabled. You can also disable it per-buffer, if you
set a buffer variable:  >
  let b:no_xtabline = 1
<
------------------------------------------------------------------------------
                                                       *xtabline-map_prefix*  >
    let g:xtabline_settings.map_prefix = '<leader>x'

Most of xtabline mappings can be associated to a prefix.
This means that most commands will be mapped to `<leader>x` + a modifier.
You can change the prefix and all mappings will be changed accordingly.
Most mappings presented are meant prefixed by <prefix>, when preceded by *.

------------------------------------------------------------------------------
                                                  *xtabline-enable_mappings*  >
    let g:xtabline_settings.enable_mappings = 0

Mappings are disabled by default.

------------------------------------------------------------------------------
                                               *xtabline-enable_persistance*  >
    let g:xtabline_settings.enable_persistance = 1

Persistance is enabled by default.

------------------------------------------------------------------------------
                                                    *xtabline-tabline_modes*  >
    let g:xtabline_settings.tabline_modes = ['tabs', 'arglist']

The modes that can be put in this list are:

- |buffers|:    buffer names, formatted with |xtabline-buffer_format|.
- |tabs|:       the tabs CWDs, if per-tab CWD is active, or the buffer name
- |arglist|:    the files contained in the arglist, as shown by |:args|

The modes can be cycled with <F5> (default).

------------------------------------------------------------------------------
                                                      *xtabline-use_tab_cwd*  >
    let g:xtabline_settings.use_tab_cwd = 0
<
If not 0, each will have its own CWD. This CWD will persist across sessions, if
persistance is enabled.
>
  0:  the plugin won't touch the CWD when switching tabs
  1:  the plugin will use `:cd` and autocommands to change the tab CWD
  2:  the plugin will use `:tcd` (default if the command is available)

Note that:

1. buffer filtering in the tabline is an independent feature and can be
   disabled/enabled on its own: |xtabline-buffer_filtering|.

2. independently from the method used, buffer filtering is based on the working
   directory reported by vim |getcwd()|, so it also works if this option is
   disabled. Take this in consideration if your vim version supports |:tcd|.

------------------------------------------------------------------------------
                                                 *xtabline-buffer_filtering*  >
    let g:xtabline_settings.buffer_filtering = 1
<
Set this value to 0 to disable directory-based buffer filtering.

------------------------------------------------------------------------------
                                                 *xtabline-show_current_tab*  >
    let g:xtabline_settings.show_current_tab = 1
<
Set this value to 0 to remove the tab CWD from the right side of the tabline.

------------------------------------------------------------------------------
                                                   *xtabline-recent_buffers*  >
    let g:xtabline_settings.recent_buffers = 10

The number of buffers that can be shown in the tabline is limited (by default)
to the 10 most recently accessed buffers.

------------------------------------------------------------------------------
                                                   *xtabline-relative_paths*  >
    let g:xtabline_settings.relative_paths = 0

By default, only the file name is printed in the tabline. Set this to
a positive number to show (shortened) relative paths for buffers in the
tabline, e.g.:
>
    = 0  ->  long/path/to/file.ext  ->   file.ext
    = 1  ->  long/path/to/file.ext  ->   l/p/t/file.ext
    = 2  ->  long/path/to/file.ext  ->   l/p/to/file.ext

Note that this setting is both global and specific to tabs. This means that
when a tab is created, it inherits the global setting, but if you want to
change it with the |XTabRelativePaths| command, the other tabs won't be
affected.

------------------------------------------------------------------------------
                                                   *xtabline-last_open_first*  >
    let g:xtabline_settings.last_open_first = 0

Valid buffers will be ordered by time of access. Note that special or extra
buffers can still be listed before them, but they are also highlighted
differently.

------------------------------------------------------------------------------
                                                    *xtabline-buffer_format*  >
    let g:xtabline_settings.buffer_format = 2

This setting controls how the buffers are formatted in the tabline. Valid
values are:

  `1`       the buffer number (as by bufnr('%')), and the buffer base name
  `2`       the buffer position in the tabline, and the buffer base name
  `string`  a formatting string, see |xtabline-buffers-formatting|
  `func`    a funcref (the buffer number is passed as parameter)

String example:
>
    let g:xtabline_settings.buffer_format = ' n I< l +'

Function example:
>
    fun! MyBuflineFormat(bufnr)
      let A = '%#TabLineSel#'
      let B = bufnr('%') == a:bufnr ? '%#PmenuSel#' : '%#TabLine#'
      let name = bufname(a:bufnr) != '' ? bufname(a:bufnr) : '...'
      return printf('%s %s %s %s ', A, a:bufnr, B, name)
    endfun

    let g:xtabline_settings.buffer_format = function('MyBuflineFormat')

------------------------------------------------------------------------------
                                                       *xtabline-tab_format*  >
    let g:xtabline_settings.tab_format = 1

    = 0  ->  long/path/to/file.ext  ->   file.ext
    = 1  ->  long/path/to/file.ext  ->   l/p/t/file.ext
    = 2  ->  long/path/to/file.ext  ->   l/p/to/file.ext

As above, but for tabs mode. The value must be an integer.
If a tab has a custom name, this will have higher priority.

------------------------------------------------------------------------------
                                                *xtabline-tabs_show_bufname*  >
    let g:xtabline_settings.tabs_show_bufname = 0

If enabled, tabs will always show the buffer name, not the directory name. If
not using per-tab CWD, this will happen regardless.





TABLINE MODES                                                  *xtabline-modes*
===============================================================================

Command                Mapping~
XTabCycleMode           <F5>
XTabFiltering           *f

*XTabCycleMode*     will cycle the tabline among the modes defined by the
                  |xtabline-tabline_modes| setting.

*XTabFiltering*     will toggle buffer filtering, based on either the tab's CWD
                  or base directory.





TAB BUFFERS                                                  *xtabline-buffers*
===============================================================================

Plug                              Mapping~
<Plug>(XT-Select-Buffer)          [count] <BS>         *xtabline-select-buffer*

Command                           Mapping~
XTabNextBuffer                    [count] ]b
XTabPrevBuffer                    [count] [b
XTabCloseBuffer                   *q
XTabHideBuffer                    *z
XTabMoveBuffer                    *m
XTabMoveBufferNext                *]
XTabMoveBufferPrev                *[
XTabPinBuffer                     *p
XTabRelativePaths                 */

*XTabNextBuffer* and *XTabPrevBuffer* accept a [count], to move to ±[N] buffer, as
they are shown in the tabline.  If moving beyond the limit, it will start from
the start (or the end).

`Select-Buffer` works this way:

* it needs a [count] to work, eg. 2<BS> would bring you to buffer #2
* when not using a [count], it will execute a command of your choice

Define this command by setting the |select_buffer_alt_action| variable.
Default is |:buffer| #.

Examples:
>
    " switch to alternative buffer
    let g:xtabline_settings.select_buffer_alt_action = "buffer #"
    " call fzf-vim :Buffers command
    let g:xtabline_settings.select_buffer_alt_action = "Buffers"


*XTabCloseBuffer* will close and delete the current buffer, while keeping the
window open, and loading either:

* the alternate buffer
* a valid buffer for the tab

It will not try to close the tab page/quit vim, unless:
>
    let g:xtabline_settings.close_buffer_can_close_tab = 1
    let g:xtabline_settings.close_buffer_can_quit_vim  = 1
<
*XTabHideBuffer* removes the buffer from the list of recent buffers for the
tab, effectively hiding it from the tabline if there are enough tab buffers, so
that the next most recent one will take its place. Then [count] buffer will be
selected, as by |Select-Buffer|. Selects first if no count is given.
Differently from |XTabCloseBuffer|, the buffer is not deleted.

*XTabMoveBuffer* will move the current buffer at [count] position, or first if
no count is given.

*XTabMoveBufferNext* and *XTabMoveBufferPrev* move the current buffer to the
next/previous position in the tabline, but they only work for buffers that are
considered valid for the current tab.

*XTabPinBuffer* pins a buffer, so that it will be visible in all tabs.

*XTabRelativePaths* toggles between basename and relative path in the tabline.
Both the command and the mapping accept a [count], if this is given, the last
[count-1] directories won't be 'shortened'. See |xtabline-relative_paths| to
know how this count works.






TAB WORKING AND BASE DIRECTORIES                         *xtabline-directories*
===============================================================================

Mappings are provided to set a tab's working directory, and optionally a base
directory. Setting a tab working directory means that every time you enter that
tab, the CWD changes to that directory.

Consider that if you set a tab WD, the old WD is restored when that tab is
left: >
  start Vim       ->  a WD is set
  create tab      ->  assign a tab WD  -> WD changes and is set for tab
  change tab      ->  the old WD is restored
  go back to tab  ->  tab's WD is applied
<                                                     *xtabline-base-directory*
Sometimes you may want to show buffers from a different directory, or from
a subdirectory of the CWD. Or you may not want to change the working directory
at all, and still be able to show only buffers from a specific directory.

In this cases you can set a base directory for buffer filtering, without
changing the tab's CWD. The tab label in the upper right corner will keep
showing the CWD (or the tab's name, if set), but it will be differently
highlighted, to remind you that you have set a different base directory for
buffer filtering.

Command                Mapping~
XTabWD[!]               cdw
XTabBD[!]               cdb
                        cdc
                        cdd

*XTabWD*      Set the tab CWD. With a bang, you'll be prompted for a cwd.
*XTabBD*      Set the base filtering directory. With a bang, it is cleared.

You can see that are 4 mappings that start with `cd`:

* cdc   sets the CWD, relative to the currently open buffer (cd `current`)
* cdd   sets the CWD, [count1] directories below current buffer (cd `down`)
* cdw   you'll be prompted for a cwd
* cdb   you'll be prompted for a base filtering directory






MANAGING TABS AND BUFFERS                                     *xtabline-manage*
===============================================================================


Command                Mapping~
XTabNew                *n
XTabLast               *'
XTabReopen             *u

*XTabNew*     accepts a parameter, that is the name of the new tab
*XTabLast*    Brings you back to the last visited tab
*XTabReopen*  lets you reopen a previosly closed tab, and is repeatable


Command                Mapping~
XTabListTabs           *a           (mnemonic: 'all tabs')
XTabListBuffers        *l
XTabLoadTab            *tl
XTabSaveTab            *ts
XTabDeleteTab          *td
XTabDeleteBuffers      *bd

Saved tabs are stored in `$HOME/.vim/.XTablineTabs`.




SESSION MANAGEMENT                                          *xtabline-sessions*
===============================================================================

Command                Mapping ~
XTabLoadSession        *sl
XTabSaveSession        *ss
XTabDeleteSession      *sd
XTabNewSession         *sn

Descriptions are saved in `$HOME/.vim/.XTablineSessions`.

Session commands operate on sessions found in the specified directory. Default:
>
  let g:xtabline_settings.sessions_path = '$HOME/.vim/session'

When loading sessions, the last modification date will be shown, along with
the description and the symbol `[%]` that marks the active session (if any).






OTHER COMMANDS                                                 *xtabline-other*
===============================================================================

Command                Mapping~
XTabPurge              *x
XTabCleanUp            *c
XTabCleanUp!           *k
XTabTodo               *d
XTabConfig             *C
XTabTheme              *T

|XTabNERDBookmarks| opens the list of |NERDTreeBookmarks|.


BUFFERS CLEAN-UP                                            *xtabline-clean-up*

*XTabPurge*

This command is handy to close all buffers that aren't bound to a physical
file (eg. git logs, previews, quickfix windows etc). The tab won't be closed.

*XTabCleanUp* [!]

This command deletes all buffers from the global buffers list, that are not
valid for any of the current tabs. Useful to get rid of terminal buffers in
neovim, for example, or to keep slim your buffer list.

With a bang, it also deletes tab buffers, leaving only the currently open
windows/buffers for each tab.


TAB-TODO                                                    *xtabline-tab-todo*

This command opens a todo file at the tab's CWD.

Inside the todo buffer, `\q` does |:update| and closes the buffer.

You can define the filename and other options:
>
  let g:xtabline_settings.todo = { 'file': '.TODO', 'prefix': 'below',
    \'command': 'sp', 'size': 20, 'syntax': 'markdown'}

`file`    : the filename that will be used
`command` : eg. `below 20sp`, `vs`, `edit`, etc, check |opening-window|
`syntax`  : the filetype that will be assigned


CUSTOMIZING TABS AND BUFFERS             *xtabline-customizing-tabs-and-buffers*

Command                Mapping~
XTabRenameTab          *tn
XTabRenameBuffer       *bn
XTabIcon               *ti
XTabBufferIcon         *bi
XTabFormatBuffer       *bf
XTabResetTab           *tr
XTabResetBuffer        *br
XTabCustomTabs         *tc

*XTabFormatBuffer*    change the label formatting
*XTabResetTab*        reset tab customizations
*XTabResetBuffer*     reset buffer customization
*XTabCustomTabs*      toggle visibility of tab customizations (name, icon)

When assigning an icon, you can autocomplete the icon name, or insert a single
character. To expand the list of available icons for autocompletion, see
|xtabline-customization|

|XTabResetTab| will also try to find a suitable cwd for that tab.






OPTIONS SUMMARY                                              *xtabline-options*
===============================================================================

You can add any of these to your *.vimrc*, after having initialized the
`g:xtabline_settings` dictionary. Some of these options can be set in the
configurator.

    let g:xtabline_settings = {}
    let g:xtabline_settings.option_name = option_value

---------------------------+----------------------------------+----------
Option                     | Description                      | Default ~
---------------------------+----------------------------------+----------
enable_mappings            |                                  | 0
recent_buffers             | max number that will be shown    | 10
select_buffer_alt_action   | SelectBuffer alternative command | `buffer #`
sessions_path              | sessions directory               | `~/.vim/session`
map_prefix                 |                                  | <leader>x
close_buffer_can_close_tab |                                  | 0
close_buffer_can_quit_vim  |                                  | 0
unload_session_ask_confirm |                                  | 1
bookmarks_file             |                                  | `~/.vim/.XTablineBookmarks`
sessions_data              |                                  | `~/.vim/.XTablineSessions`
superscript_unicode_nrs    | use superscript or subscript nrs | 0
show_current_tab           |                                  | 1
last_open_first            |                                  | 0


FORMATTING                                             *xtabline-formatting*

---------------------------+-------------------------------+----------
Option                     | Description                   | Default ~
---------------------------+-------------------------------+----------
relative_paths             |                              | 0
bufline_separators         | alternative: ['', '']      | ['|', '|']
devicon_for_all_filetypes  |                              | 0
devicon_for_extensions     |                              | ['md', 'txt']
buffer_format              |                              | 2
tab_format                 |                              | 1
modified_tab_flag          |                              | '*'
close_tabs_label           |                              | ''
tab_icon                   |                              | ["📂", "📁"]
named_tab_icon             |                              | ["📂", "📁"]

`icons` are the ones that can be used when assigning an icon to a
tab/buffer, and can be used in other contexts (special buffers icon).
>
  let g:xtabline_settings.bufline_indicators = {
      \ 'modified': '[+]',
      \ 'readonly': '[🔒]',
      \ 'scratch': '[!]',
      \ 'pinned': '[📌]',
      \}

  let g:xtabline_settings.icons = {
      \'pin': '📌',
      \'star': '★',
      \'book': '📖',
      \'lock': '🔒',
      \'hammer': '🔨',
      \'tick': '✔',
      \'cross': '✖',
      \'warning': '⚠',
      \'menu': '☰',
      \'apple': '🍎',
      \'linux': '🐧',
      \'windows': '⌘',
      \'git': '',
      \'palette': '🎨',
      \'lens': '🔍',
      \'flag': '🏁',
      \}


BUFFERS FORMATTING                                *xtabline-buffers-formatting*

Default formatting is ` n I< l +`. In this notation, each character is
replaced by something, while spaces are retained as they are. Possible
elements are:

-------+--------------------------------------------
Option | Description                  ~
-------+--------------------------------------------
  l    | custom name, filename as fallback
  f    | filename
  u    | buffer number as small unicode
  n    | buffer number (real)
  N    | buffer number (order in the tabline)
  +    | indicators (modified, read only...)
  i    | icon (devicon preferred)
  I    | icon (custom icon preferred)
  <    | separator, can be suppressed by icon
  >    | separator, can't be suppressed by icon





ADDITIONAL NOTES                                               *xtabline-notes*
===============================================================================

Note that |vim-obsession| isn't mandatory: the only caveat is that, if you have
it installed, xtabline will not touch session files by itself, and persistance
will not be enabled on sessions that aren't handled by |vim-obsession|.
Persistance can be disabled (|xtabline-enable_persistance|).





CREDITS                                                      *xtabline-credits*
===============================================================================

Bram Moolenaar for Vim
Buftabline for the bufferline rendering  https://github.com/ap/vim-buftabline
Taboo for the tabline rendering          https://github.com/gcmt/taboo.vim
Tim Pope for [vim-obsession]             https://github.com/tpope/vim-obsession
Kana Natsuno for [tabpagecd]             https://github.com/kana/vim-tabpagecd



LICENSE                                                      *xtabline-license*
===============================================================================

MIT


vim:tw=79:et:sw=2:ts=2:ft=help:nowrap:
