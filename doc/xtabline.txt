*xtabline.txt*    Version 0.8.0    Last change: August 7 2019

XTABLINE - TABLE OF CONTENTS                                         *xtabline*
===============================================================================

  Introduction                                   |xtabline-introduction|
  Features                                       |xtabline-features|
  Settings and mappings                          |xtabline-settings|
  Tabline modes                                  |xtabline-modes|
  Tab buffers                                    |xtabline-buffers|
  Tab working and base directories               |xtabline-directories|
  Managing tabs and buffers                      |xtabline-manage|
    Opening tabs                                 |xtabline-opening-tabs|
    Saving and loading tabs                      |xtabline-saving-and-loading|
    Session management                           |xtabline-sessions|
    Managing buffers                             |xtabline-managing-buffers|
    Tuning buffer filtering                      |xtabline-tuning-filtering|
    Rearranging buffers                          |xtabline-rearranging|
    Customizing tabs and buffers                 |xtabline-customizing|
  Other commands, plugs and mappings             |xtabline-other|
    Buffers clean-up                             |xtabline-clean-up|
    Tab-Todo                                     |xtabline-tab-todo|
    Cwd selection                                |xtabline-cwd|
  Options summary                                |xtabline-options|
    Formatting                                   |xtabline-formatting|
    Buffers formatting                           |xtabline-buffers-formatting|
    Tab formatting                               |xtabline-tab-formatting|
    Remapping commands                           |xtabline-remapping|
  Credits                                        |xtabline-credits|
  License                                        |xtabline-license|


INTRODUCTION                                            *xtabline-introduction*
===============================================================================

This plugin tries to give you full control on the tabline:

* buffer filtering on the base of the current CWD, or other directories
* three tabline modes: (filtered) buffers, tabs, |arglist|
* limit rendered buffers to the N most recently accessed (default 10)
* persistance

More advanced features:

* buffers quick navigation (next, previous, with [count])
* reopen closed tabs
* clean up buffers across all tabs
* tabs/buffers formatting options (names, icons, separators, reordering)
* session management: load/save/delete sessions, with timestamping/descriptions
* tabs bookmarks: load/save customized tabs from/to disk
* tab-todo: customizable command to open a todo file for that tab

With the help of:

* |fzf-vim| (load saved tabs, session management)
* |vim-obsession| for automatic CWDs persistance across sessions





FEATURES LIST                                               *xtabline-features*
===============================================================================
                                                           *xtabline-rendering*
The tabline can be rendered in three different modes:

- 'buffers':  up to a max of N (default 10) recent buffers
- 'tabs':     tab name, CWD, or buffer name
- 'arglist':  buffers contained in the arglist

In |buffer-mode|, in the tabline will be shown buffers that belong to the tab's
CWD, or any open buffer inside the window. By using the custom buffer
navigation commands you can switch among them, while using the normal |:bnext|
command, you still cycle among the default (global) buffer list.
Formatting can be customized (|xtabline-bufline_format|).

In |tabs-mode|, the tabline will show the numbered tabs. The label will be
either the tab name (if defined), the tab CWD (if using per-tab CWDs), or the
filename of the first buffer in the tab.

In |arglist-mode|, the tabline will show the files defined in the arglist. You
can switch file with the usual commands (|:next|, etc).

These modes can be cycled with a mapping (<F5> by default). You can also define
which modes to cycle with a setting (|xtabline-tabline_modes|).

------------------------------------------------------------------------------

Other features, besides the tabline rendering, are:

- per-tab CWD                 |xtabline-use_tab_cwd|
- buffer filtering            |xtabline-buffer_filtering|
- tabs management             |xtabline-saving-and-loading-tabs|
- sessions management         |xtabline-sessions|

The first one means that each tab can have its own CWD (set with |:cd|): when
switching tabs, the tab's CWD is automatically restored.

The second one means that in the tabline, only buffers that are valid for the
tab's CWD will be listed.

The last two are a series of commands that allow you to save/restore tabs and
sessions.

|vim-obsession| {1} is recommended for persistance.
|fzf-vim| {2} is required for bookmarks and sessions commands.

                                     {1} https://github.com/tpope/vim-obsession
                                     {2} https://github.com/junegunn/fzf.vim

Note that |vim-obsession| isn't mandatory: the only caveat is that, if you have
it installed, xtabline will not touch session files by itself, and persistance
will not be enabled on sessions that aren't handled by |vim-obsession|.





SETTINGS AND MAPPINGS                                       *xtabline-settings*
===============================================================================

Here are described the most important settings, for the full list read
|xtabline-options|.

To change most settings, you have to initialize the settings dictionary:
>
    let g:xtabline_settings = {}

------------------------------------------------------------------------------
                                                             *xtabline-lazy*  >
You can lazy load the plugin (on |TabNew|, |SessionLoadPost|, |BufAdd|):
>
    let g:xtabline_lazy = 1

------------------------------------------------------------------------------
                                                       *xtabline-map_prefix*  >
    let g:xtabline_settings.map_prefix = '<leader>x'

Most of xtabline mappings can be associated to a prefix.
This means that most commands will be mapped to `<leader>x` + a modifier.
You can change the prefix and all mappings will be changed accordingly.
Most mappings presented are meant prefixed by <prefix>, when preceded by *.

------------------------------------------------------------------------------
                                                  *xtabline-enable_mappings*  >
    let g:xtabline_settings.enable_mappings = 0

Mappings are disabled by default.

------------------------------------------------------------------------------
                                                    *xtabline-tabline_modes*  >
    let g:xtabline_settings.tabline_modes = ['buffers', 'tabs', 'arglist']

The modes that can be put in this list are:

- |buffers|:    buffer names, formatted with |xtabline-bufline_format|.
- |tabs|:       the tabs CWDs, if per-tab CWD is active, or the buffer name
- |arglist|:    the files contained in the arglist, as shown by |:args|

The modes can be cycled with <F5> (default).

------------------------------------------------------------------------------
                                                      *xtabline-use_tab_cwd*  >
    let g:xtabline_settings.use_tab_cwd = !exists(':tcd')
<
Set this value to 0 if you don't want the plugin to manage the CWD when
switching tabs, and keep the default vim behaviour. Note that:

1. the |:tcd| feature from neovim and recent vim is not supported. Versions of
   vim that support this feature, have this setting disabled by default.
   If you plan on using |:tcd| commands, you should keep this option at 0. As
   long as the cwd reported by |getcwd()| reflects the directory given with
   |:tcd| (I'm not sure of that), buffer filtering should work anyway.

2. local working directories (set with |:lcd|) will be ignored.

3. buffer filtering in the tabline is an independent feature and should be
   disabled/enabled on its own: |xtabline-buffer_filtering|.

------------------------------------------------------------------------------
                                                 *xtabline-buffer_filtering*  >
    let g:xtabline_settings.buffer_filtering = 1
<
Set this value to 0 to disable directory-based buffer filtering.

------------------------------------------------------------------------------
                                                 *xtabline-show_current_tab*  >
    let g:xtabline_settings.show_current_tab = 1
<
Set this value to 0 to remove the tab CWD from the right side of the tabline.

------------------------------------------------------------------------------
                                                   *xtabline-recent_buffers*  >
    let g:xtabline_settings.recent_buffers = 10

The number of buffers that can be shown in the tabline is limited (by default)
to the 10 most recently accessed buffers.

------------------------------------------------------------------------------
                                                   *xtabline-relative_paths*  >
    let g:xtabline_settings.relative_paths = 0

By default, only the file name is printed in the tabline. Set this to
a positive number to show (shortened) relative paths for buffers in the
tabline, e.g.:
>
    = 0  ->  long/path/to/file.ext  ->   file.ext
    = 1  ->  long/path/to/file.ext  ->   l/p/t/file.ext
    = 2  ->  long/path/to/file.ext  ->   l/p/to/file.ext

Note that this setting is both global and specific to tabs. This means that
when a tab is created, it inherits the global setting, but if you want to
change it with the |XTabRelativePaths| command, the other tabs won't be
affected.

------------------------------------------------------------------------------
                                                   *xtabline-last_open_first*  >
    let g:xtabline_settings.last_open_first = 0

Valid buffers will be ordered by time of access. Note that special or extra
buffers can still be listed before them, but they are also highlighted
differently.

------------------------------------------------------------------------------
                                                   *xtabline-bufline_format*  >
    let g:xtabline_settings.bufline_format = 2

This setting controls how the buffers are formatted in the tabline. Valid
values are:

  `1`       the buffer number (as by bufnr('%')), and the buffer base name
  `2`       the buffer position in the tabline, and the buffer base name
  `string`  a formatting string, see |xtabline-buffers-formatting|
  `func`    a funcref (the buffer number is passed as parameter)

String example:
>
    let g:xtabline_settings.bufline_format = ' n I< l +'

Function example:
>
    fun! MyBuflineFormat(bufnr)
      let A = '%#TabLineSel#'
      let B = bufnr('%') == a:bufnr ? '%#PmenuSel#' : '%#TabLine#'
      let name = bufname(a:bufnr) != '' ? bufname(a:bufnr) : '...'
      return printf('%s %s %s %s ', A, a:bufnr, B, name)
    endfun

    let g:xtabline_settings.bufline_format = function('MyBuflineFormat')




TABLINE MODES                                                  *xtabline-modes*
===============================================================================
Command                Mapping    Plug                        ~
XTabCycleMode           <F5>      <Plug>(XT-Cycle-Mode)
XTabToggleFiltering     *tf       <Plug>(XT-Toggle-Filtering)

`XTabCycleMode`         will cycle the tabline among the modes defined by the
                      |xtabline-tabline_modes| setting.

`XTabToggleFiltering`   will toggle buffer filtering, based on either the tab's
                      CWD or base directory.





TAB BUFFERS                                                  *xtabline-buffers*
===============================================================================
Plug                              Default                              ~
<Plug>(XT-Select-Buffer)          [count] <BS>
<Plug>(XT-Next-Buffer)            [count] ]b
<Plug>(XT-Prev-Buffer)            [count] [b
<Plug>(XT-Close-Buffer)           *q

`Next-Buffer` and `Prev-Buffer` accept a [count], to move to ±[N] buffer, as
they are shown in the tabline.  If moving beyond the limit, it will start from
the start (or the end).

`Select-Buffer` works this way:

* it needs a [count] to work, eg. 2<BS> would bring you to buffer #2
* when not using a [count], it will execute a command of your choice

Define this command by setting the `g:xtabline_settings.alt_action` variable.
Default is `buffer #`

Examples:
>
    " switch to alternative buffer
    let g:xtabline_settings.select_buffer_alt_action = "buffer #"
    " call fzf-vim :Buffers command
    let g:xtabline_settings.select_buffer_alt_action = "Buffers"


`XTabCloseBuffer` will close and delete the current buffer, while keeping the
window open, and loading either:

* the alternate buffer
* a valid buffer for the tab

It will not try to close the tab page/quit vim, unless:
>
    let g:xtabline_settings.close_buffer_can_close_tab = 1
    let g:xtabline_settings.close_buffer_can_quit_vim  = 1




TAB WORKING AND BASE DIRECTORIES                         *xtabline-directories*
===============================================================================

Mappings are provided to set a tab's working directory, and optionally a base
directory. Setting a tab working directory means that every time you enter that
tab, the CWD changes to that directory.

Consider that if you set a tab WD, the old WD is restored when that tab is
left: >
  start Vim       ->  a WD is set
  create tab      ->  assign a tab WD  -> WD changes and is set for tab
  change tab      ->  the old WD is restored
  go back to tab  ->  tab's WD is applied
<                                                     *xtabline-base-directory*
Sometimes you may want to show buffers from a different directory, or from
a subdirectory of the CWD. Or you may not want to change the working directory
at all, and still be able to show only buffers from a specific directory.

In this cases you can set a base directory for buffer filtering, without
changing the tab's CWD. The tab label in the upper right corner will keep
showing the CWD (or the tab's name, if set), but it will be differently
highlighted, to remind you that you have set a different base directory for
buffer filtering.

Command                Mapping    Plug                        ~
XTabWD[!]               cdw       <Plug>(XT-Working-Directory)
XTabBD[!]               cdb       <Plug>(XT-Base-Directory)
                        cdc       <Plug>(XT-Cd-Current)
                        cdd       <Plug>(XT-Cd-Down)

`XTabWD`      Set the tab CWD. With a bang, you'll be prompted for a cwd.
`XTabBD`      Set the base filtering directory. With a bang, it is cleared.

You can see that are 4 mappings that start with `cd`:

* cdc   sets the CWD, relative to the currently open buffer (cd `current`)
* cdd   sets the CWD, [count1] directories below current buffer (cd `down`)
* cdw   you'll be prompted for a cwd
* cdb   you'll be prompted for a base filtering directory






MANAGING TABS AND BUFFERS                                     *xtabline-manage*
===============================================================================

With most of the |fzf-vim| commands you can select multiple items by pressing
<Tab>.


OPENING TABS                                            *xtabline-opening-tabs*

Command                Mapping    Plug ~
XTabNew                *tn        <Plug>(XT-Tab-New)
XTabEdit               *te        <Plug>(XT-Tab-Edit)
XTabReopen             *rt        <Plug>(XT-Reopen)

`XTabNew`     accepts a parameter, that is the name of the new tab
`XTabEdit`    accepts a path, triggers rename if called with bang
`XTabReopen`  lets you reopen a previosly closed tab, and is repeatable


SAVING AND LOADING TABS                      *xtabline-saving-and-loading-tabs*

Command                Mapping    Plug ~
XTabListTabs           *tl        <Plug>(XT-List-Tabs)
XTabLoadTab            *lt        <Plug>(XT-Load-Tab)
XTabSaveTab            *st        <Plug>(XT-Save-Tab)
XTabDeleteTab          *dt        <Plug>(XT-Delete-Tab)

Saved tabs are stored in `$HOME/.vim/.XTablineTabs`.



SESSION MANAGEMENT                                          *xtabline-sessions*

Command                Mapping    Plug  ~
XTabLoadSession        *ls        <Plug>(XT-Load-Session) 
XTabSaveSession        *ss        <Plug>(XT-Save-Session) 
XTabDeleteSession      *ds        <Plug>(XT-Delete-Session) 
XTabNewSession         *ns        <Plug>(XT-New-Session) 

Descriptions are saved in `$HOME/.vim/.XTablineSessions`.

Session commands operate on sessions found in the specified directory. Default:
>
  let g:xtabline_settings.sessions_path = '$HOME/.vim/session'

When loading sessions, the last modification date will be shown, along with
the description and the symbol `[%]` that marks the active session (if any).



MANAGING BUFFERS                                    *xtabline-managing-buffers*

Command                Mapping    Plug ~
XTabListBuffers        *bl        <Plug>(XT-List-Buffers)    
XTabDeleteBuffers      *db        <Plug>(XT-Delete-Buffers)    

`XTabListBuffers`        list a list of `Tab Buffers` to choose from
`XTabDeleteBuffers`      same list, but use the |:bdelete| command on them



REARRANGING BUFFERS                              *xtabline-rearranging-buffers*

Mapping                Plug                        ~
                       <Plug>(XT-Move-Buffer-Next)
                       <Plug>(XT-Move-Buffer-Prev)
*mb                    <Plug>(XT-Move-Buffer-To)
*hb                    <Plug>(XT-Hide-Buffer)

`Move-Buffer-Next` and `Move-Buffer-Prev` don't have a default mapping.
They move the current buffer to the next/previous position in the tabline, but
they only work for buffers that are considered valid for the current tab.

`Move-Buffer-To` accepts a [count], and will move the current buffer after
[count] position.

`Hide-Buffer` puts the current buffer last, and then selects [count] buffer,
as by *Select-Buffer*. Selects first if no [count] is given.







OTHER COMMANDS                                                 *xtabline-other*
===============================================================================

Command                Mapping    Plug ~
XTabPurge              *pt        <Plug>(XT-Purge)  
XTabCleanUp!           *wa        <Plug>(XT-Wipe-All)  
XTabCleanUp            *cu        <Plug>(XT-Clean-Up)  
XTabTodo               *tt        <Plug>(XT-Tab-Todo)  
XTabConfig             *C         <Plug>(XT-Config)
XTabTheme              *T         <Plug>(XT-Theme)

`XTabNERDBookmarks` opens the list of |NERDTreeBookmarks|.


BUFFERS CLEAN-UP                                         *xtabline-clean-up*

`XTabPurge`

This command is handy to close all buffers that aren't bound to a physical
file (eg. git logs, previews, quickfix windows etc). The tab won't be closed.

`XTabCleanUp`, `XTabCleanUp!`

This command deletes all buffers from the global buffers list, that are not
valid for any of the current tabs. Useful to get rid of terminal buffers in
neovim, for example, or to keep slim your buffer list.

With a bang, it also deletes tab buffers, leaving only the currently open
windows/buffers for each tab.


TAB-TODO                                                  *xtabline-tab-todo*

This command opens a todo file at the tab's CWD. Default mapping is *tt

Inside the todo buffer, `q` saves and closes the buffer.

You can define the filename and other options:
>
  let g:xtabline_settings.todo = { 'file': '.TODO', 'prefix': 'below',
    \'command': 'sp', 'size': 20, 'syntax': 'markdown'}

`file`    : the filename that will be used
`command` : eg. `below 20sp`, `vs`, `edit`, etc, check |opening-window|
`syntax`  : the filetype that will be assigned


CUSTOMIZING TABS AND BUFFERS             *xtabline-customizing-tabs-and-buffers*

Command                Mapping    Plug                         ~
XTabRenameTab          *nt        <Plug>(XT-Rename-Tab)
XTabRenameBuffer       *nb        <Plug>(XT-Rename-Buffer)
XTabIcon               *it        <Plug>(XT-Tab-Icon)
XTabBufferIcon         *ib        <Plug>(XT-Buffer-Icon)
XTabFormatBuffer       *fb        <Plug>(XT-Buffer-Format)
XTabRelativePaths      *rp        <Plug>(XT-Relative-Paths)
XTabResetTab           *Rt        <Plug>(XT-Reset-Tab)
XTabResetBuffer        *Rb        <Plug>(XT-Reset-Buffer)
XTabCustomTabs         *ct        <Plug>(XT-Custom-Tabs)
XTabPinBuffer          *pb        <Plug>(XT-Pin-Buffer)

`XTabFormatBuffer`    change the label formatting
`XTabResetTab`        reset tab customizations
`XTabResetBuffer`     reset buffer customization
`XTabCustomTabs`      toggle visibility of tab customizations (name, icon)
`XTabPinBuffer`       a pinned buffer will be visible in all tabs

When assigning an icon, you can autocomplete the icon name, or insert a single
character. To expand the list of available icons for autocompletion, see
|xtabline-customization|

`XTabResetTab` will also try to find a suitable cwd for that tab.

                                                            *XTabRelativePaths*
`XTabRelativePaths`  toggles between basename and relative path in the
bufferline. Both the command and the mapping accept a [count], if this is
given, the last [count-1] directories won't be 'shortened'.
See |xtabline-relative_paths| to know how this count works.






OPTIONS SUMMARY                                              *xtabline-options*
===============================================================================

You can add any of these to your *.vimrc*, after having initialized the
`g:xtabline_settings` dictionary. Some of these options can be set in the
configurator.

    let g:xtabline_settings = {}
    let g:xtabline_settings.option_name = option_value

---------------------------+----------------------------------+----------
Option                     | Description                      | Default ~
---------------------------+----------------------------------+----------
enable_mappings            | <Plug>s are always defined       | 0
recent_buffers             | max number that will be shown    | 10
select_buffer_alt_action   | SelectBuffer alternative command | `buffer #`
sessions_path              | sessions directory               | `~/.vim/session`
map_prefix                 |                                  | <leader>x
close_buffer_can_close_tab |                                  | 0
close_buffer_can_quit_vim  |                                  | 0
unload_session_ask_confirm |                                  | 1
bookmarks_file             |                                  | `~/.vim/.XTablineBookmarks`
sessions_data              |                                  | `~/.vim/.XTablineSessions`
superscript_unicode_nrs    | use superscript or subscript nrs | 0
show_current_tab           |                                  | 1
last_open_first            |                                  | 0


FORMATTING                                             *xtabline-formatting*

---------------------------+-------------------------------+----------
Option                     | Description                   | Default ~
---------------------------+-------------------------------+----------
relative_paths             |                              | 0
bufline_numbers            |                              | 1
bufline_sep_or_icon        | icon suppresses separator    | 0
bufline_separators         | alternative: ['', '']      | ['|', '|']
devicon_for_all_filetypes  |                              | 0
devicon_for_extensions     |                              | ['md', 'txt']
bufline_format             |                              | 2
tab_format                 |                              | "N - 2+ "
named_tab_format           |                              | "N - l+ "
bufline_tab_format         | defaults to settings above   | "N - 2+ "
bufline_named_tab_format   | defaults to settings above   | "N - l+ "
modified_tab_flag          |                              | '*'
close_tabs_label           |                              | ''
tab_icon                   |                              | ["📂", "📁"]
named_tab_icon             |                              | ["📂", "📁"]

`icons` are the ones that can be used when assigning an icon to a
tab/buffer, and can be used in other contexts (special buffers icon).
>
  let g:xtabline_settings.bufline_indicators = {
      \ 'modified': '[+]',
      \ 'readonly': '[🔒]',
      \ 'scratch': '[!]',
      \ 'pinned': '[📌]',
      \}

  let g:xtabline_settings.icons = {
      \'pin': '📌',
      \'star': '★',
      \'book': '📖',
      \'lock': '🔒',
      \'hammer': '🔨',
      \'tick': '✔',
      \'cross': '✖',
      \'warning': '⚠',
      \'menu': '☰',
      \'apple': '🍎',
      \'linux': '🐧',
      \'windows': '⌘',
      \'git': '',
      \'palette': '🎨',
      \'lens': '🔍',
      \'flag': '🏁',
      \}


BUFFERS FORMATTING                                *xtabline-buffers-formatting*

Default formatting is ` n I< l +`. In this notation, each character is
replaced by something, while spaces are retained as they are. Possible
elements are:

-------+--------------------------------------------
Option | Description                  ~
-------+--------------------------------------------
  l    | custom name, filename as fallback
  f    | filename
  n    | buffer number as small unicode
  N    | buffer number
  +    | indicators (modified, read only...)
  i    | icon (devicon preferred)
  I    | icon (custom icon preferred)
  <    | separator, can be suppressed by icon
  >    | separator, can't be suppressed by icon


TAB FORMATTING                                        *xtabline-tab-formatting*

Default formatting is `N - 2+ ` for unnamed tabs, `N - l+ ` for named tabs.
Notation rules are the same, but character meaning can be different:

-------+--------------------------------------------
Option | Description                  ~
-------+--------------------------------------------
  l    | custom name, short cwd as fallback
  -    | icon (custom icon preferred)
  +    | modified indicator
  f    | buffer filename
  a    | buffer path
  n    | tab number (current tab)
  N    | current tab / all tabs
  w    | windows count
  W    | windows count
  u    | windows count as small unicode
  U    | windows count as small unicode
  P    | full cwd
  0    | short cwd, truncated at 0 directory separators
  1    | short cwd, truncated at 1 directory separators
  2    | short cwd, truncated at 2 directory separators


REMAPPING COMMANDS                                          *xtabline-remapping*

You can remap commands individually. These are some easier mappings I use:

>
  nmap <space>x          <Plug>(XT-Purge)
  nmap <space>b          <Plug>(XT-List-Buffers)
  nmap <space>t          <Plug>(XT-List-Tabs)
  nmap <M-q>             <Plug>(XT-Close-Buffer)



CREDITS                                                      *xtabline-credits*
===============================================================================

Bram Moolenaar for Vim
Buftabline for the bufferline rendering  https://github.com/ap/vim-buftabline
Taboo for the tabline rendering          https://github.com/gcmt/taboo.vim
Junegunn Choi for [fzf-vim]              https://github.com/junegunn/fzf.vim
Tim Pope for [vim-obsession]             https://github.com/tpope/vim-obsession
Kana Natsuno for [tabpagecd]             https://github.com/kana/vim-tabpagecd



LICENSE                                                      *xtabline-license*
===============================================================================

MIT


vim:tw=79:et:sw=2:ts=2:ft=help:nowrap:
